from app.ai.gemini_loader import load_gemini_model
import json

async def generer_grille(epreuve_text: str, prompt_grille: str = None) -> str:
    """
    G√©n√®re une grille de correction √† partir du texte de l'√©preuve,
    en utilisant √©ventuellement un prompt personnalis√©.
    """
    model = load_gemini_model()
    prompt_base = f"""
Tu es un expert en g√©n√©ration d'√©preuves techniques. 

√Ä partir du texte d'√©preuve brute fourni, reformate-le **strictement** selon ces r√®gles :

### üîß Format OBLIGATOIRE :
```plaintext
epreuve_debut
  titre: √âpreuve de [MATI√àRE] - [NIVEAU]
  duree: [DUR√âE]
  exo_debut
    titre: [TITRE EXERCICE]
    type: QCM | code | ouverte
    consigne: null
    q_debut
      type: QCM | code | ouverte
      contenu: [√âNONC√â COMPLET]
      opt: a) [Option 1] (si QCM)
      opt: b) [Option 2]
      opt: c) [Option 3]
      opt: d) [Option 4]
    q_fin
    [autres questions...]
  exo_fin
  [autres exercices...]
epreuve_fin

grille_debut
  ex: 1 | q: 1 | type: QCM | rep: [a-d] | bareme: [POINTS]
  ex: 1 | q: 2 | type: code | attendu: [CRIT√àRE 1] | bareme: [POINTS]
  ex: 1 | q: 2 | type: code | attendu: [CRIT√àRE 2] | bareme: [POINTS]
  [autres r√©ponses...]
grille_fin
üìú Texte source √† convertir :
\"\"\"{epreuve_text}\"\"\"

‚ö†Ô∏è R√®gles IMP√âRATIVES :
Structure :

Titre exactement comme : √âpreuve de [Mati√®re] - [Niveau]

consigne: null si aucune consigne sp√©cifique

Pour les QCM : 4 options obligatoires (a-d)

Questions de code :

Tout l'√©nonc√© doit √™tre dans contenu: (pas de balise code:)

D√©couper les attendus en sous-crit√®res dans la grille (1 par ligne)

Grille de correction :

Bar√®me total = 20 points

Pour les questions complexes : d√©tailler les attendus (ex: "Constructeur fonctionnel", "M√©thode afficherInfos()")

Toujours pr√©ciser type: (QCM/code/ouverte)

Balises INTERDITES :

Ne jamais utiliser code: dans les questions

Pas de texte hors balises

üìå Exemple de sortie VALIDE (extrait) :
q_debut
  type: code
  contenu: Cr√©ez une classe Rectangle avec attributs longueur/largeur...
q_fin

grille_debut
  ex: 1 | q: 1 | type: code | attendu: Attributs private corrects | bareme: 2
  ex: 1 | q: 1 | type: code | attendu: Constructeur initialisant les attributs | bareme: 2
grille_fin
‚ùå Ne pas inclure : commentaires, explications, ou texte hors balises.
"""   
    if prompt_grille:
        prompt_final = f"{prompt_base}\n\nInstructions suppl√©mentaires du professeur : {prompt_grille}"
    else:
        prompt_final = prompt_base

    try:
        response = model.generate_content(prompt_final)
        grille_json_str = response.text
        # Tentative de parsing pour s'assurer que c'est un JSON valide (peut √©chouer si l'IA ne respecte pas parfaitement le format)
        grille_data = json.loads(grille_json_str)
        return grille_json_str
    except json.JSONDecodeError as e:
        print(f"Erreur de d√©codage JSON de la r√©ponse de l'IA : {e}")
        print(f"R√©ponse brute de l'IA : {grille_json_str}")
        # En cas d'erreur de parsing, retourne la cha√Æne brute pour inspection
        return grille_json_str
    except Exception as e:
        raise Exception(f"Erreur lors de la g√©n√©ration de la grille: {str(e)}")